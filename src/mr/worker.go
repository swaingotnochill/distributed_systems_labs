package mr

import (
	"fmt"
	"hash/fnv"
	"log"
	"net/rpc"
	"os"
	"plugin"
	"sort"
)

// Map functions return a slice of KeyValue.
type KeyValue struct {
	Key   string
	Value string
}

// for sorting by key.
type ByKey []KeyValue

// for sorting by key.
func (a ByKey) Len() int           { return len(a) }
func (a ByKey) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByKey) Less(i, j int) bool { return a[i].Key < a[j].Key }

// States
// IDLE -> 0
// IN_PROGRESS -> 1
// COMPLETED -> 2
type WorkerState int

const (
	IDLE WorkerState = iota
	IN_PROGRESS
	COMPLETED
)

// use ihash(key) % NReduce to choose the reduce
// task number for each KeyValue emitted by Map.
func ihash(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32() & 0x7fffffff)
}

func getAndProcessMapTask(mapf func(string, string) []KeyValue, intermediateMap map[int][]KeyValue, workerState *WorkerState) bool {

	// Process only when the worker is idle.
	if *workerState != IDLE {
		return false
	}

	// The worker calls the co-ordinator to get maptask.
	// Worker request: {WorkerState}
	// Coordinator response : {fileName, taskId}
	taskRequest := TaskRequest{WorkerState: *workerState}
	taskResponse := TaskResponse{}

	err := CallCoordinatorForMap(&taskRequest, &taskResponse)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("[DEBUG] : Called Co-ordinator with RPC.\n taskRequest: %v.\n, taskResponse: %v.\n", taskRequest, taskResponse)

	currentProcessingFile := taskResponse.FileName
	content, err := os.ReadFile(currentProcessingFile)
	if err != nil {
		log.Fatalf("cannot read: ", currentProcessingFile)
	}
	// Store the intermediate output in keyvalue pairs.
	var intermediateKeyValueArray []KeyValue
	intermediateKeyValueArray = mapf(currentProcessingFile, string(content))

	// This is the intermediate key value generated by each task. Have to map it to n reduce tasks, since
	// each mapper should create nReduce tasks.
	for i := 0; i < len(intermediateKeyValueArray); i++ {
		hashValue := ihash(intermediateKeyValueArray[i].Key) % taskResponse.NReduce
		// This returns a "int". This value is cooresponding to a number ranging from 1-> nReduce
		// associated with a intermediateKeyValue.
		intermediateMap[hashValue] = append(intermediateMap[hashValue], intermediateKeyValueArray[i])
	}

	// TODO: Should i make a rpc call to check if all the files have been processed? OR use the previous
	// call to get this value?

	*workerState = IDLE
	notifyTaskRequest := NotifyTaskRequest{}
	notifyTaskResponse := NotifyTaskResponse{}
	err = CallCoordinatorToNotifyMapperTask(&notifyTaskRequest, &notifyTaskResponse)
	if err != nil {
		fmt.Println("[ERROR]: Failed to notify coordinator")
	}
}

// main/mrworker.go calls this function.

func Worker(mapf func(string, string) []KeyValue,
	reducef func(string, []string) string) {

	// Your worker implementation here.
	fmt.Println("[DEBUG] : [Worker]: Processing the files...")

	// // read each input file,
	// // pass it to Map,
	// // accumulate the intermediate Map output.
	intermediate := make(map[int][]KeyValue)
	workerState := IDLE

	// Handle Map tasks.
	for {
		go getAndProcessMapTask(mapf, intermediate, &workerState)
	}

	// // a big difference from real MapReduce is that all the
	// // intermediate data is in one place, intermediate[],
	// // rather than being partitioned into NxM buckets.

	// This worker is free from Map task now.
	// TODO: Should i send a rpc request asking for more map task since its free now?

	// oname := "mr-out-0"
	// ofile, _ := os.Create(oname)

	// // call Reduce on each distinct key in intermediate[],
	// // and print the result to mr-out-0.
	// //
	// i := 0
	// for i < len(intermediate) {
	// 	j := i + 1
	// 	for j < len(intermediate) && intermediate[j].Key == intermediate[i].Key {
	// 		j++
	// 	}
	// 	values := []string{}
	// 	for k := i; k < j; k++ {
	// 		values = append(values, intermediate[k].Value)
	// 	}
	// 	output := reducef(intermediate[i].Key, values)
	//
	// 	// this is the correct format for each line of Reduce output.
	// 	fmt.Fprintf(ofile, "%v %v\n", intermediate[i].Key, output)
	//
	// 	i = j
	// }
	//
	// ofile.Close()
	//
}

// @function: CallCoordinator()
// This function makes an 'rpc' call to the co-ordinator to get one of the tasks out from n reduce tasks.

func CallCoordinatorForMap(taskRequest *TaskRequest, taskResponse *TaskResponse) error {
	ok := call("Coordinator.GetMapTask", taskRequest, taskResponse)
	if !ok {
		return fmt.Errorf("[DEBUG]: [worker]: GetTask failed!")
	}
	return nil
}

func CallCoordinatorToNotifyMapperTask(notifyTaskRequest *NotifyTaskRequest, notifyTaskResponse *NotifyTaskResponse) error {
	ok := call("Coordinator.NotifyMapperTaskCompletion", notifyTaskRequest, notifyTaskResponse)
	if !ok {
		return fmt.Errorf("[DEBUG]: [worker]: Notify task for mapper failed!")
	}
	return nil
}

// send an RPC request to the coordinator, wait for the response.
// usually returns true.
// returns false if something goes wrong.
func call(rpcname string, args interface{}, reply interface{}) bool {
	// c, err := rpc.DialHTTP("tcp", "127.0.0.1"+":1234")
	sockname := coordinatorSock()
	c, err := rpc.DialHTTP("unix", sockname)
	if err != nil {
		log.Fatal("dialing:", err)
	}
	defer c.Close()

	err = c.Call(rpcname, args, reply)
	if err == nil {
		return true
	}

	fmt.Println(err)
	return false
}

// load the application Map and Reduce functions
// from a plugin file, e.g. ../mrapps/wc.so
func loadPlugin(filename string) (func(string, string) []KeyValue, func(string, []string) string) {
	p, err := plugin.Open(filename)
	if err != nil {
		log.Fatalf("cannot load plugin %v", filename)
	}
	xmapf, err := p.Lookup("Map")
	if err != nil {
		log.Fatalf("cannot find Map in %v", filename)
	}
	mapf := xmapf.(func(string, string) []KeyValue)
	xreducef, err := p.Lookup("Reduce")
	if err != nil {
		log.Fatalf("cannot find Reduce in %v", filename)
	}
	reducef := xreducef.(func(string, []string) string)

	return mapf, reducef
}
